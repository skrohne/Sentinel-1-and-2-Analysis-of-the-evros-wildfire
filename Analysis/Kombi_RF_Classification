//Load your AOI
var aoi = table;

// Load your Inputdata
var postS2 = image3; 
var preS2 = image4; 
var preS1 = image; 
var postS1 = image2; 

// Load your Trainingsdata
var trainingPointsPre = table2; 
var trainingPointsPost = table3; 



// === Preparing Sentinel 1 Data ===

// RBD (Radar Burn Difference)
function calculateRBD(post, pre, band) {
  return post.select(band).subtract(pre.select(band)).rename('RBD_' + band.split('_')[0]);
}

// RBR (Radar Burn Ratio)
function calculateRBR(post, pre, band) {
  return post.select(band).divide(pre.select(band)).rename('RBR_' + band.split('_')[0]);
}

// RVI (Radar Vegetation Index)
function calculateRVI(image, vvBand, vhBand) {
  return image.select(vhBand).multiply(4)
    .divide(image.select(vvBand).add(image.select(vhBand)))
    .rename('RVI');
}

// DPSVI (Dual Polarization SAR Vegetation Index)
function calculateDPSVI(image, vvBand, vhBand) {
  return image.select(vvBand).add(image.select(vhBand))
    .divide(image.select(vvBand))
    .rename('DPSVI');
}

// Calculate Differences
function calculateDifference(postIndex, preIndex, name) {
  return postIndex.subtract(preIndex).rename('diff_' + name);
}
// define bands
var vvBand = 'VV_gamma0_lee';
var vhBand = 'VH_gamma0_lee';

// RBD & RBR
var rbdVV = calculateRBD(postS1, preS1, vvBand);
var rbdVH = calculateRBD(postS1, preS1, vhBand);
var rbrVV = calculateRBR(postS1, preS1, vvBand);
var rbrVH = calculateRBR(postS1, preS1, vhBand);

// RVI & DPSVI
var preRVI = calculateRVI(preS1, vvBand, vhBand);
var postRVI = calculateRVI(postS1, vvBand, vhBand);
var diffRVI = calculateDifference(postRVI, preRVI, 'RVI');

var preDPSVI = calculateDPSVI(preS1, vvBand, vhBand);
var postDPSVI = calculateDPSVI(postS1, vvBand, vhBand);
var diffDPSVI = calculateDifference(postDPSVI, preDPSVI, 'DPSVI');

var vvTexture = preS1.select('VV_gamma0_lee')
  .reduceNeighborhood({
    reducer: ee.Reducer.stdDev(),
    kernel: ee.Kernel.square(3)
  }).rename('VV_stdDev');
  
// === Preparing Sentinel 2 data  ===

//Calculate NDVI
function calculateNDVI(image) {
  return image.normalizedDifference(['B8', 'B4']).rename('NDVI');
}
//Calculate SAVI
function calculateSAVI(image) {
  return image.expression(
    '((NIR - RED) / (NIR + RED + L)) * (1 + L)', {
      'NIR': image.select('B8'),
      'RED': image.select('B4'),
      'L': 0.5
    }).rename('SAVI');
}
//Calculate EVI
function calculateEVI(image) {
  return image.expression(
    '2.5 * ((NIR - RED) / (NIR + 6 * RED - 7.5 * BLUE + 1))', {
      'NIR': image.select('B8'),
      'RED': image.select('B4'),
      'BLUE': image.select('B2')
    }).rename('EVI');
}
//Calculate MIRBI
function calculateMIRBI(image) {
  return image.expression(
    '10 * SWIR1 - 9.8 * SWIR2 + 2', {
      'SWIR1': image.select('B11'),
      'SWIR2': image.select('B12')
    }).rename('MIRBI');
}
//Calculate BAI
function calculateBAI(image) {
  return image.expression(
    '1 / ((0.1 - NIR)**2 + (0.06 - RED)**2)', {
      'NIR': image.select('B8'),
      'RED': image.select('B4')
    }).rename('BAI');
}
//Calculate BAIS2
function calculateBAIS2(image) {
  return image.expression(
    '(1 - sqrt((B6 * B7 * B8A) / B4)) * ((B12 - B8A) / sqrt(B12 + B8A) + 1)', {
      'B4': image.select('B4'),
      'B6': image.select('B6'),
      'B7': image.select('B7'),
      'B8A': image.select('B8A'),
      'B12': image.select('B12')
    }).rename('BAIS2');
}
//Calculate NBR
function calculateNBR(image) {
  return image.normalizedDifference(['B8', 'B12']).rename('NBR');
}

// Function to get pre, post, and delta indices
function getIndexTriplet(calcFunc, preImage, postImage, indexName) {
  var pre = calcFunc(preImage);
  var post = calcFunc(postImage);
  var delta = post.subtract(pre).rename('d' + indexName);
  return {pre: pre, post: post, delta: delta};
}
// Generate all indices
var NDVI = getIndexTriplet(calculateNDVI, preS2, postS2, 'NDVI');
var SAVI = getIndexTriplet(calculateSAVI, preS2, postS2, 'SAVI');
var EVI = getIndexTriplet(calculateEVI, preS2, postS2, 'EVI');
var MIRBI = getIndexTriplet(calculateMIRBI, preS2, postS2, 'MIRBI');
var BAI = getIndexTriplet(calculateBAI, preS2, postS2, 'BAI');
var BAIS2 = getIndexTriplet(calculateBAIS2, preS2, postS2, 'BAIS2');
var NBR = getIndexTriplet(calculateNBR, preS2, postS2, 'NBR');


// Feature Stack Pre
var featureStackPre = preS1
  .select([
    'VV_lee', 'VH_lee',
    //'VV_gamma0_lee', 'VH_gamma0_lee'
  ])
  .addBands(preS2.select([
     'B2', 'B3', 'B4', 'B5', 'B6', 'B7', 'B8', 'B8A', 'B11', 'B12']))
  //.addBands(preRVI.rename('RVI'))
  //.addBands(preDPSVI.rename('DPSVI'));
  .addBands(NBR.pre.rename('NBR'))
  .addBands(NDVI.pre.rename('NDVI'))
  .addBands(MIRBI.pre.rename('MIRBI'))
  .addBands(BAI.pre.rename('BAI'))
  .addBands(BAIS2.pre.rename('BAIS2'))
  .addBands(EVI.pre.rename('EVI'))
  .addBands(SAVI.pre.rename('SAVI'))

// Feature Stack Post
var featureStackPost = postS1
  .select([
    'VV_lee', 'VH_lee',
    //'VV_gamma0_lee', 'VH_gamma0_lee'
  ])
  .addBands(postS2.select([
     'B2', 'B3', 'B4', 'B5', 'B6', 'B7', 'B8', 'B8A', 'B11', 'B12']))
  //.addBands(rbdVV.rename('RBD_VV'))
  //.addBands(rbdVH.rename('RBD_VH'))
  .addBands(rbrVV.rename('RBR_VV'))
  .addBands(rbrVH.rename('RBR_VH'))
  .addBands(diffRVI.rename('diffRVI'))
  .addBands(diffDPSVI.rename('diffDPSVI'))
  //.addBands(postRVI.rename('RVI'))
  //.addBands(postDPSVI.rename('DPSVI'))
  .addBands(vvTexture.rename('Texture_VV'))
  .addBands(NDVI.post.rename('NDVI'))
  .addBands(NBR.post.rename('NBR'))
  //.addBands(SAVI.post.rename('SAVI'))
  //.addBands(EVI.post.rename('EVI'))
  .addBands(MIRBI.post.rename('MIRBI'))
  .addBands(BAI.post.rename('BAI'))
  .addBands(BAIS2.post.rename('BAIS2'))


// === Classification ===

function trainClassifier(image, trainingData, classProperty, numTrees) {
var training = image.sampleRegions({
 collection: trainingData,
 properties: [classProperty],
 scale: 10,
});

 var classifier = ee.Classifier.smileRandomForest(numTrees)
.train({
 features: training,
 classProperty: classProperty
 });

 return classifier;
 }

function classifyImage(image, classifier, validationData, classProperty) {
var classified = image.classify(classifier);
 var validation = classified.sampleRegions({
    collection: validationData,
 properties: [classProperty],
 scale: 10, 
 tileScale: 8
 });
 var errorMatrix = validation.errorMatrix({
 actual: classProperty,
 predicted: 'classification'
 });
 return {
 classified: classified,
 errorMatrix: errorMatrix
 };
 }
 
 // Parameter
var numTrees = 100;
var classProperty = 'class'; 

// Function: Train + Classify + Validate + Feature Importance
function runClassification(trainingPoints, featureStack, numClasses, palette, label) {
  var withRandom = trainingPoints.randomColumn('random');
  var trainingData = withRandom.filter(ee.Filter.lt('random', 0.7));
  var validationData = withRandom.filter(ee.Filter.gte('random', 0.7));
  
  var classifier = trainClassifier(featureStack, trainingData, classProperty, numTrees);
  var results = classifyImage(featureStack, classifier, validationData, classProperty);
  
  // Add classified map
  Map.addLayer(results.classified, {min: 0, max: numClasses - 1, palette: palette}, 'RF Classification ' + label);
  
  // Accuracy
  print('Error Matrix ' + label + ':', results.errorMatrix);
  print('Overall Accuracy ' + label + ':', results.errorMatrix.accuracy());
  print('Kappa Index ' + label + ':', results.errorMatrix.kappa());
  print('User Accuracy' + label + ':' , results.errorMatrix.consumersAccuracy());
  print('Producers Accuracy' + label + ':' , results.errorMatrix.producersAccuracy()); 
  // Feature importance
  var importance = ee.Dictionary(classifier.explain().get('importance'));
  var total = importance.values().reduce(ee.Reducer.sum());
  var importancePercent = importance.map(function(key, value) {
    return ee.Number(value).divide(total).multiply(100);
  });
  print('Feature Importance in % (' + label + ')', importancePercent);
  
  return results;
}

// Run PRE
var resultsPre = runClassification(
  trainingPointsPre,
  featureStackPre,
  3,
  ['red', 'green', 'blue'],
  'PRE'
);

// Run POST
var resultsPost = runClassification(
  trainingPointsPost,
  featureStackPost,
  4,
  ['red', 'green', 'blue', 'yellow'],
  'POST'
);
